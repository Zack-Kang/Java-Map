package com.study.architecture.principle;

/**
 * http://www.uml.org.cn/sjms/201211023.asp
 * http://www.jianshu.com/p/7c09b3ed70d2
 * 设计原则：
 * 1、单一职责原则（SRP）：它规定一个类应该只有一个发生变化的原因；即一个类只完成一个功能，如果做不到一个类只完成一个功能，最少要保证一个方法只完成一个功能。
 * 2、依赖倒置原则：高层模块不应该依赖低层模块，二者都应该依赖其抽象；抽象不应该依赖细节；细节应该依赖抽象。
 * 3、里氏替换原则（Liskov Substitution Principle LSP）：所有引用基类的地方必须能够透明的使用其子类对象。也就是说，只要父类出现的地方子类就能够出现，而且替换为子类不会产生任何错误或异常。
 * 4、迪米特法则（Law of emeter）：一个对象应该对其他对象了解最少，迪米特法则的核心观念就是类间解耦，弱耦合，只有弱耦合了以后，类的复用性才可以提高。
 * 5、接口隔离原则：一个接口完成的功能尽可能的单一，不要让一个接口承担过多的责任。
 * 6、开闭原则： 对扩展开放，对修改闭合。就是我们改变一个软件时（比如扩展其他功能），应该通过扩展的方式来达到软件的改变，而不应爱修改原有代码来实现变化。
 *
 *
 */

public class Main {

    public static void main(String[] args) {
        System.out.println("Hello World!");
    }
}
