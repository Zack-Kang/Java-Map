package com.study.architecture.principle.exchanger;

/**
 * 里氏替换原则
 * 所有能引用基类的地方，必须能透明的使用其子类的对象
 * 1、只要父类出现的地方，子类就可以出现，替换成子类也不会产生任何错误
 * 2、使用者不需要知道是子类还是父类
 *
 * 需求：玩家玩射击气球游戏，他既能使用AK仿真枪，也可以使用步枪，还可以使用手枪射击气球
 *
 * 优缺点：
 * 里氏替换原则原则核心是继承，同样他的优缺点也是继承的优缺点
 * 优点：
 * 代码共享：共享代码，子类都拥有父类的方法和属性，将父类的代码共享给了子类
 * 重用性：提高代码的重用性，子类可以重用父类的代码
 * 子父类异同：子类形似父类，异于父类，子类可以随意扩展父类
 * 开放性：提高产品和项目的开放性，父类随意扩展，开放性随之增加了
 *
 * 缺点：
 * 侵入性：继承是侵入性的，子类强制继承父类的方法和属性
 * 灵活性：降低代码的灵活性，子类必须拥有父类的属性和方法，子类受到了父类的约束，这是从子类的角度讲的
 * 耦合性：增强了耦合性，父类的属性和方法被修改时，还需要顾及其子类，可能会带来大量的重构，这是从父类的角度讲的
 *
 * 自身体现
 * 缺点：
 * 将子类作为一个业务来使用，会让代码间的耦合关系都复杂，缺乏类替换标准
 * 将子类当做父类用，抹杀了子类的个性
 *
 *
 * 返回值：
 * 父类方法返回值类型F,子类方法返回值类型S，里氏替换原则是S范围必须小于F
 * 重载：
 * 父类子类方法参数类型或者数量不同，如果要符合里氏替换原则要求的话，子类参数必须》=父类参数，即不能让子类自己定义的方法被调用
 *
 *
 *
 */
public class Client {

    public static void main(String[] args){
        IGun iGun = new AK47Gun();
        //IGun iGun = new USPGun();
        Player player = new Player();
        player.buyGun(iGun);
        player.fire();
    }
}
