package com.study.base;
/**
 * 静态：static
 * 是一个修饰符，用于修饰成员（成员变量和成员函数）
 * 当成员被静态修饰后，就多了一个调用方式，类名.静态成员
 * 
 * 栈内存
 * 堆内存
 * 方法区/共享区/数据区：类中的方法、类中共享数据（静态成员）
 * 
 * 
 * static特点：
 * 1、静态随着类的加载而加载，随着类的消失而消失
 *    也就是说，静态会随着类的消失而消失，说明他的生命周期最长
 * 2、优先于对象存在
 * 	     静态是先存在的对象时后存在的
 * 3、被所有对象所共享
 * 4、可以直接被类名所调用
 * 
 * 实例变量和类变量的区别：
 *  
 * 1、存放位置
 *    类变量随着类的加载而存在于方法区中
 *    实例变量随着对象的建立而存在于堆内存中
 * 2、生命周期
 * 	     类变量生命周期最长，随着类的消失而消失
 * 	     实例变量生命周期随着实例对象的消失而消失
 * 3、主函数是静态的：是一个特殊的函数，可以被jvm调用，作为程序的入口
 *    jvm调用主函数时，传入的是new String[0];
 *
 * 静态的使用注意事项：
 * 1、静态方法只能访问静态成员
 *    非静态方法可以访问静态成员
 * 2、静态方法中不可以定义this,super关键字，因为静态方法优先于对象存在，所以静态方法中不可以出现this
 *
 *
 * 静态有利有弊：
 * 利：对对象的共享数据进行单独空间存储，节省空间，没有必要每个对象都存储一份，可以直接被类名调用
 * 弊：生命周期过长，访问出现局限性（只能访问静态）
 *
 *
 * 什么时候使用静态
 * 要从两方面下手，因为静态修饰的成员变量和成员函数
 * 
 * 什么时候定义静态变量（类变量）呢？
 * 当对象中出现共享数据时，该数据被静态所修饰
 * 对象中的特有数据要定义成非静态存在于堆内存中
 * 
 * 什么时候定义静态函数呢？
 * 当功能内部没有访问到非静态数据时（对象的特有数据），那么该功能可以定义成静态
 * 
 * 
 * 
 * 
 */
public class StaticTest {

	public static void main(String[] args) {
		// TODO Auto-generated method stub

	}

}
